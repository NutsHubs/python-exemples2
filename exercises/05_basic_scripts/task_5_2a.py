# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


ip_mask = input('Enter IP address by format A.B.C.D/MASK: ')

ip = ip_mask[:ip_mask.find('/')]
mask = ip_mask[(ip_mask.find('/')-len(ip_mask)):]
oct1, oct2, oct3, oct4 = ip.split('.')

bin_network = f'{int(oct1):08b}{int(oct2):08b}{int(oct3):08b}{int(oct4):08b}'[:int(mask.strip('/'))]
bin_network = f'{bin_network:0<32}'

mask_bin = format(2 ** int(mask.strip('/'))-1, 'b')
mask_bin = '{:0<32}'.format(mask_bin)

net_oct1 = bin_network[0:8]
net_oct2 = bin_network[8:16]
net_oct3 = bin_network[16:24]
net_oct4 = bin_network[24:]

mask_oct1 = mask_bin[0:8]
mask_oct2 = mask_bin[8:16]
mask_oct3 = mask_bin[16:24]
mask_oct4 = mask_bin[24:]

ip_out = f'Network:\n' \
         f'{int(net_oct1, 2)} {int(net_oct2, 2)} {int(net_oct3, 2)} {int(net_oct4, 2)}\n' \
         f'{bin_network[0:8]} {bin_network[8:16]} {bin_network[16:24]} {bin_network[24:]}\n' \
         f'\n' \
         f'Mask:\n' \
         f'{mask}\n' \
         f'{int(mask_oct1, 2):<8} {int(mask_oct2, 2):<8} {int(mask_oct3, 2):<8} {int(mask_oct4, 2):<8}\n' \
         f'{mask_oct1} {mask_oct2} {mask_oct3} {mask_oct4}'

print(ip_out)
